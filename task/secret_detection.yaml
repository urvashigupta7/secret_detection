apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: secret-detection
spec:
  description: This task can be used to detect secrets in your repository.
  workspaces:
    - name: source
      description: A workspace that contains fetched git repo.
  params:
    - name: repo_path
      type: string
      description: path to the repo to be scanned.
    - name: config_file_url
      type: string
      description: url from where the config file would be fetched.
      default: ""
    - name: config_file_path
      type: string
      description: path to config file.
      default: ""
    - name: output_format
      type: string
      description: output_format to use. (JSON|CSV|SARIF) (default:"json")
      default: "json"
    - name: report_output_path
      type: string
      description: path of file to save analysis report
    - name : args
      type: array
      description: "args"
      default: []
  steps:
    - name: fetch-config-file
      image: registry.access.redhat.com/ubi8/ubi-minimal:8.2
      workingDir: $(workspaces.source.path)
      script: |
         #!/usr/bin/env bash
         
         if [ -z $(params.config_file_url) ]
         then
          echo "No config file url was set. Default secret detection configuration will be used";
         else
          curl $(params.config_file_url) --output $(params.config_file_path)
          echo "Fetched the config file from given ($(params.config_file_url)) URL and successfully saved at $(workspaces.source.path)/$(params.config_file_path)"
         fi

    - name: detect-secret
      image: zricethezav/gitleaks:latest
      workingDir: $(workspaces.source.path)
      script: |
         #!/bin/bash
         
        
         if [ ! -z $(params.config_file_url) ]
         then
          gitleaks --path=$(params.repo_path) --config-path=$(params.config_file_path)  \
          --format=$(params.output_format) --report=$(params.report_output_path) $*
         else
          gitleaks --path=$(params.repo_path)  \
          --format=$(params.output_format) --report=$(params.report_output_path) $*
         fi
         
         if [ $? -eq 0 ]
         then
          echo "No leaks found"
          exit 0
         else
          echo "============= Report successfully generated at $(params.report_output_path) ==============="
          exit 1
         fi
        
      args:
      - $(params.args)

    